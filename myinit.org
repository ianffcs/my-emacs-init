#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* Repos
#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
(setq package-archives '(("org"       .  "http://orgmode.org/elpa/")
                         ("gnu"       .  "https://elpa.gnu.org/packages/")
                         ("melpa"     .  "https://melpa.org/packages/")))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("tromey" . "http://tromey.com/elpa/") t)
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t
      :pin org
      :config
      '(org-directory "~/sync/orgfiles")
      '(org-default-notes-file (concat org-directory "/life.org"))
      '(org-export-html-postamble nil)
      '(org-hide-leading-stars t)
      '(org-startup-indented t)
      '(org-journal-dir "~/sync/orgfiles")
      '(org-agenda-files (list "~/Sync/orgfiles/life.org"))
      '(org-display-inline-images t)
      '(org-redisplay-inline-images t)
      '(org-startup-with-inline-images "inlineimages")
      (require 'ox-reveal))

    (setq org-reveal-root "file:///home/ianffcs/reveal.js")

    (use-package org-journal
      :ensure t)

  (defun do-org-show-all-inline-images ()
    (interactive)
    (org-display-inline-images t t))
  (global-set-key (kbd "C-c C-x C v")
                  'do-org-show-all-inline-images)

#+END_SRC
* Org Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
     'org-babel-load-languages '((python . t)
                                 (emacs-lisp . t)
                                 (shell . t)
                                 (C . t)
                                 ;; (Clojure . t)
                                 (haskell . t)
                                 (R . tx)
                                 (js . t)
                                 (dot . t)
                                 (org . t)
                                 (latex . t )))
#+END_SRC
* Backup
#+BEGIN_SRC emacs-lisp
(setq
   backup-by-copying 1      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions 1
   kept-new-versions 6
   kept-old-versions 2
   version-control 1)       ; use versioned backups
#+END_SRC
* Counsel / Ivy / Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy)
    (setq projectile-completion-system 'ivy)
    (setq magit-completing-read-function 'ivy-completing-read)
    (setq magit-completing-read-function 'ivy-completing-read))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))

  (use-package smex
    :ensure t)
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (global-company-mode t))

(use-package company-irony
:ensure t
:config
(add-to-list 'company-backends 'company-irony))

(use-package irony
:ensure t
:config
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

(use-package irony-eldoc
:ensure t
:config
(add-hook 'irony-mode-hook #'irony-eldoc))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
#+END_SRC
* Iedit and narrow/widen dwin
#+BEGIN_SRC emacs-lisp
; mark and edit all copies of the marked region simultaniously.
(use-package iedit
:ensure t)

; if you're windened, narrow to the region, if you're narrowed, widen
; bound to C-x n
(defun narrow-or-widen-dwim (p)
"If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
Intelligently means: region, org-src-block, org-subtree, or defun,
whichever applies first.
Narrowing to org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is already
narrowed."
(interactive "P")
(declare (interactive-only))
(cond ((and (buffer-narrowed-p) (not p)) (widen))
((region-active-p)
(narrow-to-region (region-beginning) (region-end)))
((derived-mode-p 'org-mode)
;; `org-edit-src-code' is not a real narrowing command.
;; Remove this first conditional if you don't want it.
(cond ((ignore-errors (org-edit-src-code))
(delete-other-windows))
((org-at-block-p)
(org-narrow-to-block))
(t (org-narrow-to-subtree))))
(t (narrow-to-defun))))
#+END_SRC
* Try
#+BEGIN_SRC emacs-lisp
(use-package try
        :ensure t)
#+END_SRC

* Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
             :ensure t
             :config
             (which-key-mode))
#+END_SRC
* Autocomplete
#+BEGIN_SRC emacs-lisp  :tangle no
(use-package auto-complete
             :ensure t
             :init
             (progn
               (ac-config-default)
               (global-auto-complete-mode t)))
#+END_SRC
* Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
               :ensure t
               :init
               (global-undo-tree-mode))
#+END_SRC
* Evil
#+BEGIN_SRC emacs-lisp
  ;; (use-package evil
    ;; :ensure t
    ;; :init
    ;; (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    ;; (setq evil-want-keybinding nil)
    ;; :config
    ;; (evil-mode 1)

  ;; (use-package evil-collection
    ;; :after evil
    ;; :ensure t
    ;; :config
    ;; (evil-collection-init)
#+END_SRC

* Better Shell
#+BEGIN_SRC emacs-lisp
(use-package better-shell
    :ensure t
    :bind (("C-\"" . better-shell-shell)
           ("C-:" . better-shell-remote-open)))
#+END_SRC
* personal keymap
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Ian Fernandez"
      user-mail-address "ianffcs@tutanota.com")
  ;;--------------------------------------------------------------------------
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind ("C-x g" . magit-status)
  :init
  (setq magit-diff-options (quote ("--word-diff")))
  (setq magit-diff-refine-hunk 'all))
  ;; Use evil keybindings within magit
;  (use-package evil-magit
;    :ensure t
;    :config
;    ;; Default commit editor opening in insert mode
;    (add-hook 'with-editor-mode-hook 'evil-insert-state)
;    (evil-define-key 'normal with-editor-mode-map
;      (kbd "RET") 'with-editor-finish
;      [escape] 'with-editor-cancel
;      )
;    (evil-define-key 'normal git-rebase-mode-map
;      "l" 'git-rebase-show-commit))
#+END_SRC
* PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
:ensure t)

(use-package org-pdfview
:ensure t)

(require 'pdf-tools)
(require 'org-pdfview)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
      :ensure t
      :bind ("C-c p" . projectile-command-map)
      :config
      (projectile-global-mode)
    (setq projectile-completion-system 'ivy))
#+END_SRC
* Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn

      (setq treemacs-follow-after-init          t
            treemacs-width                      35
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t))
    :bind
    (:map global-map
          ([f8]        . treemacs-toggle)
          ([f9]        . treemacs-projectile-toggle)
          ("<C-M-tab>" . treemacs-toggle)
          ("M-0"       . treemacs-select-window)
          ("C-c 1"     . treemacs-delete-other-windows)
        ))
  (use-package treemacs-projectile
    :defer t
    :ensure t
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header))

  ;(use-package treemacs-evil
   ; :ensure t)
#+END_SRC
* IBuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))
               ("org" (name . "^.*org$"))
               ("magit" (mode . magit-mode))
               ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
               ("web" (or (mode . web-mode) (mode . js2-mode)))
               ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
               ("mu4e" (or

                        (mode . mu4e-compose-mode)
                        (name . "\*mu4e\*")
                        ))
               ("programming" (or
                               (mode . clojure-mode)
                               (mode . clojurescript-mode)
                               (mode . python-mode)
                               (mode . c++-mode)))
               ("emacs" (or
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*Messages\\*$")))
               ))))
(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-auto-mode 1)
            (ibuffer-switch-to-saved-filter-groups "default")))

;; don't show these
                                        ;(add-to-list 'ibuffer-never-show-predicates "zowie")
;; Don't show filter groups if there are no buffers in that group
(setq ibuffer-show-empty-filter-groups nil)

;; Don't ask for confirmation to delete marked buffers
(setq ibuffer-expert t)
#+END_SRC
* Regex
#+BEGIN_SRC emacs-lisp
(use-package pcre2el
:ensure t
:config (pcre-mode))
#+END_SRC
* EMMS with mpd
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :ensure t
    :config
    (require 'emms-setup)
    (require 'emms-player-mpd)
    (emms-all)
    (setq emms-seek-seconds 5)
    (setq emms-player-list '(emms-player-mpd))
    (setq emms-info-functions '(emms-info-mpd))
    (setq emms-player-mpd-server-name "localhost")
    (setq emms-player-mpd-server-port "6601")
    (setq emms-playlist-buffer-name "*Music*")
    (setq emms-info-asynchronously t)
    (require 'emms-info-libtag) ;;; load functions that will talk to emms-print-metadata which in turn talks to libtag and gets metadata
    (setq emms-info-functions '(emms-info-libtag)) ;;; make sure libtag is the only thing delivering metadata
    (require 'emms-mode-line)
    (emms-mode-line 1)
    (require 'emms-playing-time)
    (emms-playing-time 1)
    :bind
    ("s-m p" . emms)
    ("s-m b" . emms-smart-browse)
    ("s-m r" . emms-player-mpd-update-all-reset-cache)
    ("<XF86AudioPrev>" . emms-previous)
    ("<XF86AudioNext>" . emms-next)
    ("<XF86AudioPlay>" . emms-pause)
    ("<XF86AudioStop>" . emms-stop))

  (defun ts/showsong ()
   (emms-next-noerror)
   (set 'notifyid (dbus-call-method :session "org.kde.knotify" "/Notify" "org.kde.KNotify" "event" "emms_song" "emacs" '(:array (:variant nil)) "Currently Playing" (emms-show) '(:array :byte 0 :byte 0 :byte 0 :byte 0) '(:array) :int64 0))
   (run-at-time "5 sec" nil 'dbus-call-method :session "org.kde.knotify" "/Notify" "org.kde.KNotify" "closeNotification" :int32 notifyid)
   )

  (setq emms-player-next-function 'ts/showsong)

  (defun mpd/start-music-daemon ()
  "Start MPD, connects to it and syncs the metadata cache."
  (interactive)
  (shell-command "mpd")
  (mpd/update-database)
  (emms-player-mpd-connect)
  (emms-cache-set-from-mpd-all)
  (message "MPD Started!"))
  (global-set-key (kbd "s-m c") 'mpd/start-music-daemon)

  (defun mpd/kill-music-daemon ()
  "Stops playback and kill the music daemon."
  (interactive)
  (emms-stop)
  (call-process "killall" nil nil nil "mpd")
  (message "MPD Killed!"))
  (global-set-key (kbd "s-m k") 'mpd/kill-music-daemon)

  (defun mpd/update-database ()
  "Updates the MPD database synchronously."
  (interactive)
  (call-process "mpc" nil nil nil "update")
  (message "MPD Database Updated!"))
  (global-set-key (kbd "s-m u") 'mpd/update-database)
#+END_SRC

* MPC Setup
#+BEGIN_SRC emacs-lisp
(setq mpc-host "localhost:6601")
#+END_SRC
* Telega
#+BEGIN_SRC emacs-lisp
(use-package telega
  :load-path  "~/telega.el"
  :commands (telega)
  :defer t)
#+END_SRC
* Langs
** Clojure
 #+BEGIN_SRC emacs-lisp
   (use-package cider
     :ensure t
     :config
     ;; (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)
     ;; (add-hook 'cider-repl-mode-hook (lambda () (sp-local-pair '(cider-repl-mode) "'" "'" :actions nil)))
     ;; (add-hook 'cider-repl-mode-hook #'agressive-ident-mode)
     (setq cider-repl-pop-to-buffer-on-connect 'display-only)
     (setq cider-repl-use-clojure-font-lock nil)
     (setq cider-repl-use-pretty-printing t)
     (setq cider-repl-wrap-history t)
     (setq cider-repl-result-prefix ";; => ")
     (setq org-babel-clojure-backend 'cider))

   (use-package ac-cider
     :ensure t
     :config (ac-config-default)
     (add-hook 'cider-repl-mode-hook 'ac-cider-setup)
     (add-hook 'cider-mode-hook 'ac-cider-setup)
     (eval-after-load "auto-complete"
       '(add-to-list 'ac-modes 'cider-repl-mode)))

   (use-package highlight-parentheses
     :ensure t)
     ;; :config
     ;; (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
     ;; (add-hook 'clojurescript-mode-hook #'smartparens-strict-mode)
     ;; (add-hook 'clojure-mode-hook (lambda () (sp-local-pair '(clojure-mode) "'" "'" :actions nil))))

     (use-package clojure-mode
     :ensure t
     ) ;;(add-hook 'clojure-mode-hook #'aggressive-indent-mode))

     (defun set-auto-complete-as-completion-at-point-function ()
     (setq completion-at-point-functions '(auto-complete)))
     (add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)
     (add-hook 'cider-repl-mode-hook 'set-auto-complete-as-completion-at-point-function)
     (add-hook 'cider-mode-hook 'set-auto-complete-as-completion-at-point-function)
     (eval-after-load "cider"
     '(define-key cider-mode-map (kbd "C-c C-d") 'ac-cider-popup-doc))

 #+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (setq py-python-command "python3")
  (setq python-shell-interpreter "python3")

  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)
  ;; (use-package company-jedi
      ;; :ensure t
      ;; :config
      ;; (add-hook 'python-mode-hook 'jedi:setup)
         ;; )

  ;; (defun my/python-mode-hook ()
    ;; (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)

  (use-package pipenv
    :hook (python-mode . pipenv-mode)
    :init
    (setq
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended))

  (use-package ein
    :ensure t)
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t)

  (use-package intero
    :ensure t :config
    (progn
      (add-hook 'haskell-mode-hook 'intero-mode)))

  (setq flycheck-check-syntax-automatically '(save new-line))
  (flycheck-add-next-checker 'intero '(warning . haskell-hlint))
#+END_SRC
** WebMode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
    :ensure t
    :config
           (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
           (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
           (setq web-mode-engines-alist
                 '(("django"    . "\\.html\\'")))
           (setq web-mode-ac-sources-alist
           '(("css" . (ac-source-css-property))
           ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
         ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
(setq web-mode-enable-auto-closing t))
(setq web-mode-enable-auto-quoting t) ; this fixes the quote problem I mentioned
#+END_SRC
** JS
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
:ensure t
:ensure ac-js2
:init
(progn
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
))

(use-package js2-refactor
:ensure t
:config
(progn
(js2r-add-keybindings-with-prefix "C-c C-m")
;; eg. extract function with `C-c C-m ef`.
(add-hook 'js2-mode-hook #'js2-refactor-mode)))
(use-package tern
:ensure tern
:ensure tern-auto-complete
:config
(progn
(add-hook 'js-mode-hook (lambda () (tern-mode t)))
(add-hook 'js2-mode-hook (lambda () (tern-mode t)))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;;(tern-ac-setup)
))

;;(use-package jade
;;:ensure t
;;)

;; use web-mode for .jsx files
(add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))


;; turn on flychecking globally
(add-hook 'after-init-hook #'global-flycheck-mode)

;; disable jshint since we prefer eslint checking
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))

;; use eslint with web-mode for jsx files
(flycheck-add-mode 'javascript-eslint 'web-mode)

;; customize flycheck temp file prefix
(setq-default flycheck-temp-prefix ".flycheck")

;; disable json-jsonlist checking for json files
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(json-jsonlist)))

;; adjust indents for web-mode to 2 spaces
(defun my-web-mode-hook ()
  "Hooks for Web mode. Adjust indents"
  ;;; http://web-mode.org/
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2))
(add-hook 'web-mode-hook  'my-web-mode-hook)
#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex)

(defun tex-view ()
  (interactive)
  (tex-send-command "evince" (tex-append tex-print-file ".pdf")))

(require 'latex-pretty-symbols)
(add-hook 'markdown-mode-hook 'pandoc-mode)
(add-hook 'markdown-mode-hook 'latex-unicode-simplified)
(setq markdown-enable-math 1)
(add-hook 'org-mode-hook 'latex-unicode-simplified)

#+END_SRC
** Scheme
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t
    :config (setq geiser-active-implementations '(guile racket)))
#+END_SRC
** R
#+begin_src emacs-lisp
  (use-package ess
    :ensure t)
#+end_src
** CSS
** CSV
#+BEGIN_SRC emacs-lisp
(use-package csv-mode
 :ensure t
:config
(setq csv-separators '("," ";" "|" " " )))
#+END_SRC

* Interface tweaks
#+BEGIN_SRC emacs-lisp
  (cua-mode)
  ; don't show the startup screen
  (setq inhibit-startup-screen 1)
  ; don't show the menu bar
  (menu-bar-mode -1)
  ; don't show the tool bar
  (require 'tool-bar)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (global-linum-mode t)
  (use-package linum-relative
  :ensure t)
  ; turn on mouse wheel support for scrolling
  (require 'mwheel)
  (mouse-wheel-mode 1)

  ; number of characters until the fill column
  (setq-default fill-column 70)

  ; each line of text gets one line on the screen (i.e., text will run
  ; off the left instead of wrapping around onto a new line)
  (setq-default truncate-lines 1)
  ; truncate lines even in partial-width windows
  (setq truncate-partial-width-windows 1)

  ; default window width and height
  (defun custom-set-frame-size ()
    (add-to-list 'default-frame-alist '(height . 50))
    (add-to-list 'default-frame-alist '(width . 178)))
  (custom-set-frame-size)
  (add-hook 'before-make-frame-hook 'custom-set-frame-size)

  (use-package rainbow-delimiters
   :ensure t
   :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  ; always use spaces, not tabs, when indenting
  (setq-default indent-tabs-mode nil)

  ; show the current line and column numbers in the stats bar as well
  (line-number-mode 1)
  (column-number-mode 1)

  (use-package linum-relative
    :ensure t
    :init (linum-relative-global-mode t)
    :config (linum-relative-global-mode 1)
    (setq linum-relative-current-symbol "")
    (set-face-attribute 'linum nil :height 110))

  ; don't blink the cursor
  (blink-cursor-mode 0)

  ; make sure transient mark mode is enabled (it should be by default,
  ; but just in case)
  (transient-mark-mode 1)

  ; highlight parentheses when the cursor is next to them
  (require 'paren)
  (show-paren-mode 1)

  (use-package nyan-mode
    :ensure t
    :init
    (setq nyan-animate-nyancat t
          nyan-wavy-trail t
          mode-line-format
          (list '(:eval (list (nyan-create)))))
    (nyan-mode t))

  (use-package which-key
    :ensure t
    :config (which-key-mode))
;; before save clears whitespace
  (add-hook 'before-save-hook 'whitespace-cleanup)

  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (setq multi-term-program "/bin/bash")
#+END_SRC

* Themes
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  (use-package monokai-theme
               :ensure t)

  (use-package base16-theme
               :ensure t)

  ;(use-package moe-theme
  ;            :ensure t)

  ;; (use-package poet-theme
        ;; :ensure t)
#+END_SRC
* Pretty Mode
#+BEGIN_SRC emacs-lisp
(use-package pretty-mode
  :ensure t
  :config
    (add-hook 'clojure-mode-hook #'turn-on-pretty-mode))
#+END_SRC
* Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :init
  (define-key smartparens-mode-map (kbd "M-(") 'sp-wrap-round)
  (define-key smartparens-mode-map (kbd "M-[") 'sp-wrap-square)
  (define-key smartparens-mode-map (kbd "M-{") 'sp-wrap-curly)
  (progn
    (add-hook 'cider-repl-mode-hook #'smartparens-strict-mode)
    (add-hook 'clojure-mode-hook #'smartparens-strict-mode)
    (add-hook 'emacs-lisp-mode-hook #'smartparens-strict-mode)
    (add-hook 'common-lisp-mode-hook #'smartparens-strict-mode)
    (add-hook 'scheme-mode-hook #'smartparens-strict-mode)
    (add-hook 'lisp-mode-hook #'smartparens-strict-mode))
    :config
    (sp-local-pair '(emacs-lisp-mode) "'" "'" :actions nil)
    (sp-local-pair '(common-lisp-mode) "'" "'" :actions nil)
    (sp-local-pair '(clojure-mode) "'" "'" :actions nil)
    (sp-local-pair '(cider-repl-mode) "'" "'" :actions nil)
    (sp-local-pair '(scheme-mode) "'" "'" :actions nil)
    (sp-local-pair '(lisp-mode) "'" "'" :actions nil))
#+END_SRC
* Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (progn
      (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)
      (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
      (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
      (add-hook 'common-lisp-mode-hook #'rainbow-delimiters-mode)
      (add-hook 'scheme-mode-hook #'rainbow-delimiters-mode)
      (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)))
#+END_SRC
